name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: ./build

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        run: npm test

      - name: Run code quality checks
        run: npm run lint && npm run coverage

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: test
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add deployment commands here, e.g., uploading artifacts to a staging server

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [build, test, deploy]
    
    if: failure() || success() # Notify on success or failure
    
    steps:
      - name: Notify team
        uses: actions/github-script@v6
        with:
          script: |
            const failureMessage = `CI/CD pipeline failed. Please check the logs for details.`;
            const successMessage = `CI/CD pipeline succeeded.`;

            const context = github.context;
            const status = context.payload.workflow_run.conclusion;

            let message = status === 'success' ? successMessage : failureMessage;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: message
            });
